import streamlit as st
from app.sidebar_manager import SidebarManager
from streamlit_drawable_canvas import st_canvas
import tempfile
from datetime import date, timedelta
import pandas as pd
from PIL import Image, ImageDraw, ImageFont, ImageOps
import numpy as np
import datetime
import holidays
import img2pdf
import os
import io
import tempfile
import base64
import pathlib
import sys

# Cấu hình trang Streamlit
st.set_page_config(
    page_title="Đơn Đăng Ký Học",  # Tiêu đề trang
    layout="wide",  # Bố cục rộng
    initial_sidebar_state="expanded"  # Sidebar mở mặc định
)

# Render sidebar (Quản lý Sidebar)
sidebar = SidebarManager()
sidebar.render_sidebar()

class ResourceManager:
    def __init__(self):
        self.base_dir = self.get_absolute_path()
        self.image_dir = self.base_dir / "images"
        self.font_dir = self.base_dir / "fonts"

        # Thiết lập đường dẫn file
        self.paths = {
            "신청서 양식": self.image_dir / "studywork001.png",  # "Mẫu đơn đăng ký": đường dẫn đến hình ảnh mẫu đơn đăng ký
            "별지 양식": self.image_dir / "studywork002.png",  # "Mẫu phụ lục": đường dẫn đến hình ảnh mẫu phụ lục (nếu cần)
            "로고": self.image_dir / "logo.png",  # "Logo": đường dẫn đến hình ảnh logo trường
            "폰트": self.font_dir / "AppleGothic.ttf"  # "Phông chữ": đường dẫn đến file phông chữ
        }

    @staticmethod
    def get_absolute_path():
        """Lấy đường dẫn tuyệt đối cho ứng dụng."""
        if os.path.exists("/mount/src/study-work"):
            return pathlib.Path("/mount/src/study-work")
        elif os.path.exists("/workspaces/Study-work"):
            return pathlib.Path("/workspaces/Study-work")
        else:
            return pathlib.Path(__file__).parent.parent.resolve()

    def get_font_path(self):
        """Tìm và trả về đường dẫn file phông chữ."""
        if self.paths["폰트"].exists():
            return str(self.paths["폰트"])

        # Thay vì duyệt `system_font_paths`, ta có thể kiểm tra xem biến này có tồn tại hay không
        # và sử dụng một danh sách các đường dẫn font hệ thống mặc định
        system_font_paths = [
            "/usr/share/fonts/truetype/nanum/NanumGothic.ttf",  # Linux (Nanum Gothic)
            "/Library/Fonts/Arial Unicode.ttf",  # macOS (Arial Unicode)
            "C:\\Windows\\Fonts\\arial.ttf"  # Windows (Arial)
        ]

        for system_font in system_font_paths:
            if os.path.exists(system_font):
                return system_font

        st.error("Không tìm thấy file phông chữ.")
        st.info("Hãy cài đặt phông chữ NanumGothic hoặc thêm file phông chữ vào thư mục fonts.")
        st.stop()

    def validate_resources(self):
        """Kiểm tra tính hợp lệ của file tài nguyên."""
        for name, path in self.paths.items():
            if name != "폰트" and not path.exists():
                st.error(f"Không tìm thấy {name}. Đường dẫn: {path}")
                st.stop()

        self.font_path = self.get_font_path()

    def print_debug_info(self):
        """In thông tin debug."""
        st.write("Thông tin đường dẫn hiện tại:")
        st.write(f"BASE_DIR: {self.base_dir}")
        st.write(f"IMAGE_DIR: {self.image_dir}")
        st.write(f"FONT_DIR: {self.font_dir}")
        st.write(f"Đường dẫn phông chữ đang sử dụng: {self.font_path}")

# Tạo instance ResourceManager
resources = ResourceManager()

# In thông tin debug (nếu cần)
if os.getenv('STREAMLIT_DEBUG') == 'true':
    resources.print_debug_info()

# Kiểm tra tài nguyên
resources.validate_resources()

# Thiết lập đường dẫn toàn cục
BASE_DIR = resources.base_dir
IMAGE_DIR = resources.image_dir
FONT_DIR = resources.font_dir
img_path = resources.paths["신청서 양식"]
extra_img_path = resources.paths["별지 양식"]
logo_path = resources.paths["로고"]
font_path = resources.font_path

# In đường dẫn để debug
if os.getenv('STREAMLIT_DEBUG') == 'true':
    st.write(f"""
    Đường dẫn đã thiết lập:
    - Đường dẫn cơ sở: {BASE_DIR}
    - Đường dẫn ảnh: {IMAGE_DIR}
    - Đường dẫn phông chữ: {FONT_DIR}
    - Mẫu đơn đăng ký: {img_path}
    - Mẫu phụ lục: {extra_img_path}
    - Logo: {logo_path}
    - Phông chữ: {font_path}
    """)

# 1. Khởi tạo trạng thái phiên
if 'student_canvas_key' not in st.session_state:
    st.session_state.student_canvas_key = 0
    st.session_state.student_canvas_initialized = False  # Cờ khởi tạo
if 'guardian_canvas_key' not in st.session_state:
    st.session_state.guardian_canvas_key = 100
    st.session_state.guardian_canvas_initialized = False  # Cờ khởi tạo
if 'student_signature_img' not in st.session_state:
    st.session_state.student_signature_img = None
if 'guardian_signature_img' not in st.session_state:
    st.session_state.guardian_signature_img = None

# Khởi tạo phiên cho bước hiện tại
if 'step' not in st.session_state:
    st.session_state.step = 1

# Khởi tạo để lưu kế hoạch học tập trải nghiệm ngoài trường
if 'plans' not in st.session_state:
    st.session_state.plans = {}

# Hiển thị tiêu đề chính
st.markdown("<h1 style='text-align: center;'>Đơn Đăng Ký</h1>", unsafe_allow_html=True)

# Xử lý ảnh logo
def get_base64_image(image_path):
    try:
        with open(image_path, "rb") as img_file:
            encoded = base64.b64encode(img_file.read()).decode()
        return encoded
    except FileNotFoundError:
        return None

# Hiển thị logo
logo_base64 = get_base64_image(logo_path) if logo_path.exists() else None

# Hiển thị logo và tên trường (như một tiêu đề phụ)
if logo_base64:
    st.markdown(f"""
        <div style="display: flex; align-items: center; justify-content: center;">
            <img src="data:image/png;base64,{logo_base64}" alt="Logo" style="margin-right: 10px; width: 40px; height: 40px;">
            <h3 style="margin: 0;">Công Ty Eurofins VN</h3>
        </div>
    """, unsafe_allow_html=True)
else:
    st.markdown("<h3 style='text-align: center;'>Công Ty Eurofins VN</h3>", unsafe_allow_html=True)

# Tạo các tab
tabs = st.tabs([
    "1. Nhập Thông Tin Học Sinh",
    "2. Thông Tin Đăng Ký",
    "3. Kế Hoạch Học Tập",  # Phần nhập bảng Excel
    "4. Thông Tin Người Giám Hộ",
    "5. Nhập Chữ Ký",
    "6. Xác Nhận Đơn Đăng Ký"
])

# Tab 1: Nhập thông tin học sinh
with tabs[0]:
    st.header("Nhập Thông Tin Học Sinh")
    st.text_input('Họ và Tên', key='student_name')  # key duy nhất
    st.selectbox('Lớp', ['Chọn lớp', 'Lớp 10', 'Lớp 11', 'Lớp 12'], key='student_grade')
    st.selectbox('Tổ', ['Chọn tổ'] + [f'Tổ {i}' for i in range(1, 13)], key='student_class')
    st.number_input('Số thứ tự', min_value=1, max_value=50, step=1, key='student_number')

# Tab 2: Nhập thông tin đăng ký
with tabs[1]:
    st.header("Nhập Thông Tin Đăng Ký Học Tập Trải Nghiệm Ngoài Trường")

    # Hai cột cho ngày bắt đầu và ngày kết thúc
    col1, col2 = st.columns(2)
    with col1:
        # Loại bỏ min_value và chỉ thiết lập giá trị mặc định
        start_date = st.date_input(
            'Ngày Bắt Đầu',
            value=date.today() + timedelta(days=1),  # Mặc định là ngày mai
            key='start_date'
        )
    with col2:
        # Thiết lập min_value là start_date
        end_date = st.date_input(
            'Ngày Kết Thúc',
            value=start_date + timedelta(days=1),  # Mặc định là ngày sau ngày bắt đầu
            min_value=start_date,
            key='end_date'
        )

    # Thêm giải thích cho ngày bắt đầu/kết thúc được công nhận
    st.markdown("""
    **Hướng dẫn Nhập Khoảng Thời Gian Được Công Nhận Đi Học**

    Hãy nhập khoảng thời gian được công nhận đi học bằng cách loại trừ 'ngày lễ' khỏi khoảng thời gian học tập trải nghiệm ngoài trường.
    Nếu ngày kết thúc học tập trải nghiệm ngoài trường là 'Chủ Nhật', hãy nhập khoảng thời gian được công nhận đi học đến 'Thứ Sáu'.
    """)

    # Hai cột cho ngày bắt đầu và ngày kết thúc được công nhận
    col3, col4 = st.columns(2)
    with col3:
        attendance_start_date = st.date_input(
            'Ngày Bắt Đầu Được Công Nhận',
            value=start_date,
            min_value=start_date,
            max_value=end_date,
            key='attendance_start_date'
        )
    with col4:
        attendance_end_date = st.date_input(
            'Ngày Kết Thúc Được Công Nhận',
            value=attendance_start_date,
            min_value=attendance_start_date,
            max_value=end_date,
            key='attendance_end_date'
        )

    # Chọn hình thức học tập
    st.selectbox(
        'Chọn Hình Thức Học Tập',
        ['Chọn hình thức học tập', 'Du lịch cùng gia đình', 'Tham dự và thăm viếng sự kiện gia đình', 'Khám phá di tích', 'Du lịch văn học',
         'Trải nghiệm văn hóa trong nước và thế giới', 'Hành hương', 'Khám phá thiên nhiên', 'Trải nghiệm nghề nghiệp', 'Khác'],
        key='learning_type'
    )

    # Nhập mục đích và địa điểm
    st.text_input('Mục Đích', key='purpose')
    st.text_input('Địa Điểm', key='destination')

# Tab 3: Nhập Kế hoạch học tập (thêm động dựa trên form)
with tabs[2]:
    st.header("Nhập Kế Hoạch Học Tập Trải Nghiệm Ngoài Trường")

    # Thêm đoạn văn giải thích
    st.markdown('<p style="color: red; font-size: small;">Nhập lịch trình và nhấn nút thêm để tạo kế hoạch</p>', unsafe_allow_html=True)

    start_date = st.session_state.get('start_date')
    end_date = st.session_state.get('end_date')

    if start_date and end_date:
        # Tạo danh sách ngày
        date_list = []
        current_date = start_date
        while current_date <= end_date:
            date_str = f"Ngày {(current_date - start_date).days + 1} ({current_date.strftime('%m/%d')})"
            date_list.append(date_str)
            current_date += timedelta(days=1)

        # Khởi tạo plans
        if 'plans' not in st.session_state:
            st.session_state.plans = {}

        # Container cho form nhập
        with st.container():
            # Dropdown chọn ngày
            selected_date = st.selectbox(
                "Chọn Ngày",
                date_list,
                key="selected_date"
            )

            # Widget chọn thời gian
            col1, col2, col3 = st.columns(3)
            with col1:
                # Tạo các tùy chọn thời gian (cách nhau 30 phút)
                time_options = []
                for hour in range(24):
                    for minute in [0, 30]:
                        time_str = f"{hour:02d}:{minute:02d}"
                        time_options.append(time_str)

                # Thiết lập giá trị mặc định là 9:00
                default_index = time_options.index("09:00")

                selected_time = st.selectbox(
                    "Thời Gian",
                    options=time_options,
                    index=default_index,
                    key="input_time"
                )

            with col2:
                location = st.text_input("Địa Điểm", key="input_location")
            with col3:
                activity = st.text_input("Nội Dung Hoạt Động", key="input_activity")

            # Nút thêm lịch trình
            if st.button("Thêm Lịch Trình"):
                day_key = selected_date.split()[0]  # Trích xuất dạng "Ngày 1"

                if day_key not in st.session_state.plans:
                    st.session_state.plans[day_key] = []

                new_plan = {
                    "Thời Gian": selected_time,  # Sử dụng trực tiếp thời gian đã chọn
                    "Địa Điểm": location,
                    "Nội Dung Hoạt Động": activity
                }

                # Thêm lịch trình mới vào kế hoạch của ngày đó
                st.session_state.plans[day_key].append(new_plan)

                # Sắp xếp theo thời gian
                st.session_state.plans[day_key] = sorted(
                    st.session_state.plans[day_key],
                    key=lambda x: x['Thời Gian']
                )

                st.success(f"Đã thêm lịch trình vào {selected_date}.")

        # Hiển thị lịch trình hiện tại
        st.markdown("### Lịch Trình Hiện Tại")

        if st.session_state.plans:
            # Chuẩn bị dữ liệu cho dataframe
            df_data = []
            for day_key, plans in sorted(st.session_state.plans.items()):
                day_num = int(''.join(filter(str.isdigit, day_key)))
                current_date = start_date + timedelta(days=day_num - 1)
                date_str = current_date.strftime("%m/%d")

                # Sắp xếp kế hoạch của mỗi ngày theo thời gian
                sorted_plans = sorted(plans, key=lambda x: x['Thời Gian'])

                for plan in sorted_plans:
                    df_data.append({
                        "Ngày": f"{day_key} ({date_str})",
                        "Thời Gian": plan['Thời Gian'],
                        "Địa Điểm": plan['Địa Điểm'],
                        "Nội Dung Hoạt Động": plan['Nội Dung Hoạt Động']
                    })

            if df_data:
                df = pd.DataFrame(df_data)

                # Phân tách hoàn toàn hiển thị dataframe và UI xóa
                if df_data:
                    # 1. Phần hiển thị DataFrame
                    if len(df) > 15:
                        df1 = df.iloc[:15]
                        df2 = df.iloc[15:]

                        col1, col2 = st.columns(2)
                        with col1:
                            st.dataframe(
                                df1,
                                hide_index=True,
                                column_config={
                                    "Ngày": st.column_config.TextColumn("Ngày", width="medium"),
                                    "Thời Gian": st.column_config.TextColumn("Thời Gian", width="small"),
                                    "Địa Điểm": st.column_config.TextColumn("Địa Điểm", width="medium"),
                                    "Nội Dung Hoạt Động": st.column_config.TextColumn("Nội Dung Hoạt Động", width="large"),
                                }
                            )
                        with col2:
                            st.dataframe(
                                df2,
                                hide_index=True,
                                column_config={
                                    "Ngày": st.column_config.TextColumn("Ngày", width="medium"),
                                    "Thời Gian": st.column_config.TextColumn("Thời Gian", width="small"),
                                    "Địa Điểm": st.column_config.TextColumn("Địa Điểm", width="medium"),
                                    "Nội Dung Hoạt Động": st.column_config.TextColumn("Nội Dung Hoạt Động", width="large"),
                                }
                            )
                    else:
                        st.dataframe(
                            df,
                            hide_index=True,
                            column_config={
                                "Ngày": st.column_config.TextColumn("Ngày", width="medium"),
                                "Thời Gian": st.column_config.TextColumn("Thời Gian", width="small"),
                                "Địa Điểm": st.column_config.TextColumn("Địa Điểm", width="medium"),
                                "Nội Dung Hoạt Động": st.column_config.TextColumn("Nội Dung Hoạt Động", width="large"),
                            }
                        )

                    # 2. Phần UI xóa (tách biệt trong container riêng)
                    with st.container():
                        st.markdown("---")  # Đường phân cách
                        st.markdown("### Xóa Lịch Trình")

                        # Chọn lịch trình để xóa
                        delete_options = [f"{plan['Ngày']} - {plan['Thời Gian']} - {plan['Địa Điểm']} - {plan['Nội Dung Hoạt Động']}" for plan in df_data]
                        selected_plan_to_delete = st.selectbox(
                            "Chọn Lịch Trình Muốn Xóa",
                            delete_options,
                            key="selected_plan_to_delete"
                        )

                        # Nút xóa và logic
                        if st.button("Xóa Lịch Trình Đã Chọn", key="delete_plan_button"):
                            day_info = selected_plan_to_delete.split(" - ")[0]
                            time_info = selected_plan_to_delete.split(" - ")[1]
                            day_key = day_info.split(" ")[0]

                            if day_key in st.session_state.plans:
                                st.session_state.plans[day_key] = [
                                    plan for plan in st.session_state.plans[day_key]
                                    if plan['Thời Gian'] != time_info
                                ]

                                if not st.session_state.plans[day_key]:
                                    del st.session_state.plans[day_key]

                                st.success("Đã xóa lịch trình đã chọn.")
                                st.rerun()
                else:
                    st.info("Không có lịch trình nào được đăng ký.")

            else:
                st.warning("Hãy thiết lập ngày bắt đầu và ngày kết thúc học tập trải nghiệm ngoài trường.")

    else:
        st.warning("Hãy thiết lập ngày bắt đầu và ngày kết thúc học tập trải nghiệm ngoài trường.")

# Tab Nhập thông tin người giám hộ
with tabs[3]:
    st.header("Nhập Thông Tin Người Giám Hộ")

    # Thông tin người giám hộ
    col1, col2, col3 = st.columns(3)
    with col1:
        guardian_name = st.text_input('Tên Người Giám Hộ', key='guardian_name')
    with col2:
        guardian_relationship = st.text_input('Quan Hệ (với người giám hộ)', key='guardian_relationship')
    with col3:
        guardian_contact = st.text_input('Liên Hệ (người giám hộ)', key='guardian_contact')

    # Hàng thông tin người hướng dẫn
    col4, col5, col6 = st.columns(3)
    with col4:
        chaperone_name = st.text_input('Tên Người Hướng Dẫn', key='chaperone_name')
    with col5:
        chaperone_relationship = st.text_input('Quan Hệ (với người hướng dẫn)', key='chaperone_relationship')
    with col6:
        chaperone_contact = st.text_input('Liên Hệ (người hướng dẫn)', key='chaperone_contact')

# Triển khai Tab Chữ ký
with tabs[4]:
    st.header("Chữ Ký Cuối Cùng")

    # Đoạn văn giải thích
    st.markdown('<p style="color: black; font-size: small;">Nếu canvas chữ ký không hiển thị, hãy nhấn nút [Tải Canvas Chữ Ký]</p>', unsafe_allow_html=True)

    # Sửa đổi các hàm reset canvas
    def reset_student_canvas():
        st.session_state.student_canvas_key += 1
        st.session_state.student_signature_img = None
        st.session_state.student_canvas_initialized = True

    def reset_guardian_canvas():
        st.session_state.guardian_canvas_key += 1
        st.session_state.guardian_signature_img = None
        st.session_state.guardian_canvas_initialized = True

    # Logic khởi tạo tự động
    if not st.session_state.student_canvas_initialized:
        reset_student_canvas()
        st.rerun()

    if not st.session_state.guardian_canvas_initialized:
        reset_guardian_canvas()
        st.rerun()

    # Phần Chữ ký của Học sinh
    st.markdown("### Chữ Ký Học Sinh")
    col1, col2 = st.columns([4, 1])

    with col1:
        canvas_key = f"student_signature_canvas_{st.session_state.student_canvas_key}"
        student_canvas = st_canvas(
            fill_color="rgba(0, 0, 0, 0)",
            stroke_width=2,
            stroke_color="#000000",
            background_color="rgba(0, 0, 0, 0)",
            height=150,
            width=400,
            drawing_mode="freedraw",
            key=canvas_key
        )

        if student_canvas.image_data is not None:
            st.session_state.student_signature_img = student_canvas.image_data

    with col2:
        if st.button("Tải Canvas Chữ Ký", key=f"reset_student_btn_{st.session_state.student_canvas_key}"):
            reset_student_canvas()
            st.rerun()

    if st.session_state.student_signature_img is not None:
        st.markdown("✅ Hãy nhập chữ ký của học sinh.")

    # Thêm đường phân cách
    st.markdown("---")

    # Phần Chữ ký của Người Giám Hộ
    st.markdown("### Chữ Ký Người Giám Hộ")
    col3, col4 = st.columns([4, 1])

    with col3:
        # Sửa đổi key canvas của người giám hộ theo cách tương tự
        guardian_canvas_key = f"guardian_signature_canvas_{st.session_state.guardian_canvas_key}"
        guardian_canvas = st_canvas(
            fill_color="rgba(0, 0, 0, 0)",
            stroke_width=2,
            stroke_color="#000000",
            background_color="rgba(0, 0, 0, 0)",
            height=150,
            width=400,
            drawing_mode="freedraw",
            key=guardian_canvas_key
        )

        if guardian_canvas.image_data is not None:
            st.session_state.guardian_signature_img = guardian_canvas.image_data

    with col4:
        if st.button("Tải Canvas Chữ Ký", key=f"reset_guardian_btn_{st.session_state.guardian_canvas_key}"):
            reset_guardian_canvas()
            st.rerun()

    if st.session_state.guardian_signature_img is not None:
        st.markdown("✅ Hãy nhập chữ ký của người giám hộ.")

    # Xác nhận Hoàn thành Chữ ký
    if st.session_state.student_signature_img is not None and st.session_state.guardian_signature_img is not None:
        st.success("✅ Sau khi hoàn thành tất cả chữ ký, hãy chuyển sang bước tiếp theo.")

# Tab Xác nhận đơn đăng ký
with tabs[5]:
    st.header("Xác Nhận Đơn Đăng Ký")

    # Hộp giải thích gọn gàng
    st.markdown("""
        <div style="
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin: 20px auto;
            max-width: 600px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        ">
            <div style="color: #1f1f1f; font-size: 1.1em; margin-bottom: 8px;">
                📄 Tải file PDF đã tạo và nộp cho giáo viên chủ nhiệm
            </div>
            <div style="color: #666; font-size: 0.9em;">
                Xem lại đơn đăng ký và tải xuống
            </div>
        </div>
    """, unsafe_allow_html=True)

    # Thiết lập đường dẫn file ảnh
    img_path = IMAGE_DIR / "studywork001.png"
    extra_img_path = IMAGE_DIR / "studywork002.png"  # Ảnh mẫu phụ lục

    # Kiểm tra tính hợp lệ của dữ liệu bắt buộc
    required_fields = [
        "student_name", "student_grade", "student_class", "student_number",
        "start_date", "end_date", "attendance_start_date", "attendance_end_date", "plans"
    ]
    missing_fields = [field for field in required_fields if field not in st.session_state or not st.session_state[field]]

    if missing_fields:
        st.error(f"Các mục bắt buộc sau còn thiếu: {', '.join(missing_fields)}")
    else:
        try:
            # Xác minh sự tồn tại của file ảnh
            if not img_path.exists():
                st.error("Không tìm thấy ảnh mẫu đơn đăng ký.")
                st.stop()

            # Tải và thiết lập ảnh
            image = Image.open(img_path).convert("RGBA")
            draw = ImageDraw.Draw(image)

            if font_path is None:
                st.error("""
                Không tìm thấy file font.
                Bạn có thể giải quyết bằng một trong các cách sau:
                1. Cài đặt font AppleGothic trên Mac OS
                2. Thêm file AppleGothic.ttf vào thư mục fonts của dự án
                """)
                st.stop()

            font = ImageFont.truetype(str(font_path), size=55)

            # Logic tính toán ngày (học tập trải nghiệm ngoài trường)
            start_date = st.session_state.get("start_date")
            end_date = st.session_state.get("end_date")
            
            today = date.today()  # Ngày nộp
            submit_date_formatted = today.strftime("%Y년 %m월 %d일")

            try:
                if isinstance(start_date, datetime.date) and isinstance(end_date, datetime.date):
                    duration = (end_date - start_date).days + 1  # Bao gồm ngày bắt đầu và ngày kết thúc
                    start_date_formatted = start_date.strftime("%Y년 %m월 %d일")
                    end_date_formatted = end_date.strftime("%Y년 %m월 %d일")
                else:
                    raise ValueError("Ngày bắt đầu và ngày kết thúc không đúng định dạng ngày.")
            except Exception as e:
                st.error(f"Lỗi trong quá trình tính toán ngày: {e}")
                st.stop()

            # Tính toán thời gian được công nhận đi học (loại trừ ngày lễ)
            attendance_start_date = st.session_state.get("attendance_start_date")
            attendance_end_date = st.session_state.get("attendance_end_date")

            try:
                kr_holidays = holidays.KR(years=attendance_start_date.year)  # Lấy danh sách ngày lễ của Hàn Quốc trong năm
                attendance_days = [
                    attendance_start_date + timedelta(days=i)
                    for i in range((attendance_end_date - attendance_start_date).days + 1)
                    if (attendance_start_date + timedelta(days=i)) not in kr_holidays  # Loại bỏ ngày lễ
                    and (attendance_start_date + timedelta(days=i)).weekday() < 5  # Loại bỏ ngày cuối tuần (thứ 7 và CN)
                ]
                attendance_duration = len(attendance_days)
                attendance_start_formatted = attendance_start_date.strftime("%Y년 %m월 %d일")
                attendance_end_formatted = attendance_end_date.strftime("%Y년 %m월 %d일")
            except Exception as e:
                st.error(f"Lỗi trong quá trình tính toán thời gian được công nhận đi học: {e}")
                st.stop()

            # Vẽ thông tin cơ bản lên ảnh
            draw.text((770, 590), st.session_state.get("student_name", ""), fill="black", font=font)  # Tên học sinh
            draw.text((1860, 590), st.session_state.get("student_grade", "").replace('학년', ''), fill="black", font=font)  # Lớp (bỏ chữ "학년")
            draw.text((2050, 590), st.session_state.get("student_class", "").replace('반', ''), fill="black", font=font)  # Tổ (bỏ chữ "반")
            draw.text((2200, 590), str(st.session_state.get("student_number", "")), fill="black", font=font)  # Số thứ tự

            # Vẽ thời gian học tập trải nghiệm ngoài trường
            draw.text((1250, 690), start_date_formatted, fill="black", font=font)  # Ngày bắt đầu
            draw.text((1840, 690), end_date_formatted, fill="black", font=font)  # Ngày kết thúc
            draw.text((2400, 690), f"{duration}", fill="black", font=font)  # Tổng số ngày

            # Vẽ thời gian được công nhận đi học
            draw.text((1250, 800), attendance_start_formatted, fill="black", font=font)  # Ngày bắt đầu
            draw.text((1850, 800), attendance_end_formatted, fill="black", font=font)  # Ngày kết thúc
            draw.text((2400, 800), f"{attendance_duration}", fill="black", font=font)  # Tổng số ngày
            draw.text((1250, 3270), submit_date_formatted, fill="black", font=font)  # Ngày nộp đơn

            # Điều chỉnh vị trí của '0' theo hình thức học tập
            learning_type = st.session_state.get("learning_type", "")  # Lấy hình thức học tập đã chọn
            if learning_type == "가족 동반 여행":  # Du lịch cùng gia đình
                draw.text((940, 875), "0", fill="black", font=font)
            elif learning_type == "친인척 경조사 참석 및 방문":  # Tham dự và thăm viếng sự kiện gia đình
                draw.text((1700, 875), "0", fill="black", font=font)
            elif learning_type == "유적 탐방":  # Khám phá di tích
                draw.text((2075, 875), "0", fill="black", font=font)
            elif learning_type == "문학 기행":  # Du lịch văn học
                draw.text((2450, 875), "0", fill="black", font=font)
            elif learning_type == "우리 문화 및 세계 문화 체험":  # Trải nghiệm văn hóa trong nước và thế giới
                draw.text((1225, 945), "0", fill="black", font=font)
            elif learning_type == "국토 순례":  # Hành hương
                draw.text((1580, 945), "0", fill="black", font=font)
            elif learning_type == "자연 탐사":  # Khám phá thiên nhiên
                draw.text((1970, 945), "0", fill="black", font=font)
            elif learning_type == "직업 체험":  # Trải nghiệm nghề nghiệp
                draw.text((2340, 945), "0", fill="black", font=font)
            elif learning_type == "기타":  # Các hình thức khác
                draw.text((2600, 945), "0", fill="black", font=font)
            else:
                draw.text((300, 460), "학습 형태를 선택하세요", fill="red", font=font)  # Nhắc nhở chọn hình thức học tập

            # Vẽ các thông tin khác
            draw.text((580, 1050), st.session_state.get("purpose", ""), fill="black", font=font)  # Mục đích
            draw.text((580, 1200), st.session_state.get("destination", ""), fill="black", font=font)  # Địa điểm
            draw.text((710, 1330), st.session_state.get("guardian_name", ""), fill="black", font=font)  # Tên người giám hộ
            draw.text((2150, 1330), st.session_state.get("guardian_contact", ""), fill="black", font=font)  # Liên hệ người giám hộ
            draw.text((710, 1470), st.session_state.get("chaperone_name", ""), fill="black", font=font)  # Tên người hướng dẫn
            draw.text((2150, 1470), st.session_state.get("chaperone_contact", ""), fill="black", font=font)  # Liên hệ người hướng dẫn
            draw.text((1540, 1330), st.session_state.get("guardian_relationship", ""), fill="black", font=font)  # Quan hệ với người giám hộ
            draw.text((1540, 1470), st.session_state.get("chaperone_relationship", ""), fill="black", font=font)  # Quan hệ với người hướng dẫn
            draw.text((2250, 3400), st.session_state.get("student_name", ""), fill="black", font=font)  # Tên học sinh (chỗ ký tên)
            draw.text((2250, 3530), st.session_state.get("guardian_name", ""), fill="black", font=font)  # Tên người giám hộ (chỗ ký tên)

            def add_signatures(image):
                """Hàm hỗ trợ thêm hình ảnh chữ ký vào đơn đăng ký"""
                if 'student_signature_img' in st.session_state:
                    student_signature_img = Image.fromarray(np.array(st.session_state['student_signature_img']).astype('uint8')).convert("RGBA")
                    new_size = (int(student_signature_img.width), int(student_signature_img.height))  # Lấy kích thước mới
                    student_signature_img = student_signature_img.resize(new_size, Image.Resampling.LANCZOS)  # Thay đổi kích thước để đảm bảo chất lượng
                    image.paste(student_signature_img, (2400, 3350), student_signature_img)  # Dán chữ ký vào ảnh

                if 'guardian_signature_img' in st.session_state:
                    guardian_signature_img = Image.fromarray(np.array(st.session_state['guardian_signature_img']).astype('uint8')).convert("RGBA")
                    new_size = (int(guardian_signature_img.width), int(guardian_signature_img.height))  # Lấy kích thước mới
                    guardian_signature_img = guardian_signature_img.resize(new_size, Image.Resampling.LANCZOS)  # Thay đổi kích thước để đảm bảo chất lượng
                    image.paste(guardian_signature_img, (2400, 3500), guardian_signature_img)  # Dán chữ ký vào ảnh

            # Khởi tạo biến để xử lý dữ liệu kế hoạch học tập
            x_start, y_start = 580, 1570  # Vị trí bắt đầu của ô đầu tiên
            max_y = 2900
            font_size = 50
            min_font_size = 30
            extra_needed = False  # Biến đánh dấu có cần phụ lục hay không
            first_section_plans = []  # Kế hoạch cho phần đầu tiên (trang chính)
            second_section_plans = []  # Kế hoạch cho phần thứ hai (trang chính)
            remaining_plans = []  # Kế hoạch còn lại (dành cho phụ lục nếu cần)

            if 'plans' in st.session_state and isinstance(st.session_state.plans, dict):
                # Tạo text kế hoạch tổng thể
                start_date = st.session_state.start_date
                sorted_days = sorted(
                    [(day_key, (start_date + timedelta(days=int(''.join(filter(str.isdigit, day_key))) - 1)))
                     for day_key in st.session_state.plans.keys()],
                    key=lambda x: x[1]  # Sắp xếp theo ngày
                )

                # Chia kế hoạch tổng thể thành hai phần
                first_section_plans = []
                second_section_plans = []
                total_plans = []

                # Thêm tất cả các kế hoạch vào total_plans và sắp xếp theo thời gian
                for day_key, date in sorted_days:
                    plans = st.session_state.plans.get(day_key, [])
                    for i, plan in enumerate(plans):
                        plan_data = {
                            'day': day_key if i == 0 else '',  # Chỉ hiển thị ngày ở mục đầu tiên của mỗi ngày
                            'time': plan.get('시간', ''),  # Thời gian
                            'location': plan.get('장소', ''),  # Địa điểm
                            'activity': plan.get('활동내용', '')  # Nội dung hoạt động
                        }
                        total_plans.append(plan_data)

                # Chia kế hoạch tổng thể thành hai phần
                half_length = len(total_plans) // 2
                if len(total_plans) % 2 != 0:
                    half_length += 1  # Nếu số lượng kế hoạch lẻ, phần đầu tiên sẽ có nhiều hơn 1 kế hoạch

                first_section_plans = total_plans[:half_length]
                second_section_plans = total_plans[half_length:]

                # Thiết lập vị trí bắt đầu cột và khoảng cách dòng
                # Tọa độ của phần đầu tiên (cột bên trái)
                x_time_first = 800  # Vị trí bắt đầu của thời gian
                x_location_first = 1000  # Vị trí bắt đầu của địa điểm
                x_activity_first = 1300  # Vị trí bắt đầu của nội dung hoạt động

                # Tọa độ của phần thứ hai (cột bên phải)
                x_time_second = 1800  # Vị trí bắt đầu của thời gian
                x_location_second = 2000  # Vị trí bắt đầu của địa điểm
                x_activity_second = 2300  # Vị trí bắt đầu của nội dung hoạt động

                line_height = 70  # Chiều cao của mỗi dòng
                current_y = y_start  # Vị trí y hiện tại

                # Vẽ phần đầu tiên (cột bên trái)
                current_y = y_start
                current_day = None  # Lưu ngày hiện tại để tránh lặp lại
                x_start_first = 580  # Tọa độ X bắt đầu của cột bên trái

                for plan in first_section_plans:
                    if current_y >= max_y:  # Nếu vượt quá chiều cao tối đa, chuyển sang phụ lục
                        remaining_plans.append(plan)
                        extra_needed = True
                        continue

                    if plan['day'] and plan['day'] != current_day:  # Nếu bắt đầu một ngày mới
                        if current_y != y_start:  # Nếu không phải ngày đầu tiên, thêm khoảng cách
                            current_y += line_height
                        current_day = plan['day']
                        draw.text((x_start_first, current_y), current_day, fill="black", font=font)  # Hiển thị ngày
                        current_y += line_height  # Xuống dòng sau khi hiển thị ngày

                    # Thời gian/Địa điểm/Nội dung hoạt động bắt đầu ở cùng tọa độ X với ngày
                    draw.text((x_time_first, current_y), plan['time'], fill="black", font=font)  # Thời gian
                    draw.text((x_location_first, current_y), plan['location'], fill="black", font=font)  # Địa điểm
                    draw.text((x_activity_first, current_y), plan['activity'], fill="black", font=font)  # Nội dung hoạt động
                    current_y += line_height

                # Vẽ phần thứ hai (cột bên phải)
                current_y = y_start
                current_day = None
                x_start_second = 1600  # Tọa độ X bắt đầu của cột bên phải

                for plan in second_section_plans:
                    if current_y >= max_y:  # Nếu vượt quá chiều cao tối đa, chuyển sang phụ lục
                        remaining_plans.append(plan)
                        extra_needed = True
                        continue

                    if plan['day'] and plan['day'] != current_day:  # Nếu bắt đầu một ngày mới
                        if current_y != y_start:  # Nếu không phải ngày đầu tiên, thêm khoảng cách
                            current_y += line_height
                        current_day = plan['day']
                        draw.text((x_start_second, current_y), current_day, fill="black", font=font)  # Hiển thị ngày
                        current_y += line_height  # Xuống dòng sau khi hiển thị ngày

                    # Thời gian/Địa điểm/Nội dung hoạt động bắt đầu ở cùng tọa độ X với ngày
                    draw.text((x_time_second, current_y), plan['time'], fill="black", font=font)  # Thời gian
                    draw.text((x_location_second, current_y), plan['location'], fill="black", font=font)  # Địa điểm
                    draw.text((x_activity_second, current_y), plan['activity'], fill="black", font=font)  # Nội dung hoạt động
                    current_y += line_height

                # Nếu cần phụ lục, tạo ảnh phụ lục
                if extra_needed and remaining_plans:
                    extra_image = Image.open(extra_img_path).convert("RGBA")  # Mở ảnh phụ lục
                    extra_draw = ImageDraw.Draw(extra_image)  # Tạo đối tượng để vẽ lên ảnh phụ lục

                    # Điều chỉnh vị trí bắt đầu cho phụ lục
                    current_y = 700  # Bắt đầu dưới tiêu đề của phụ lục

                    # Viết tuần tự vào phụ lục, bắt đầu từ bên trái
                    x_day = 580  # Vị trí X của ngày
                    x_time = 800  # Vị trí X của thời gian
                    x_location = 1000  # Vị trí X của địa điểm
                    x_activity = 1200  # Vị trí X của nội dung hoạt động

                    # Viết tất cả các kế hoạch còn lại vào phụ lục
                    for plan in remaining_plans:
                        extra_draw.text((x_day, current_y), plan['day'], fill="black", font=font)  # Ngày
                        extra_draw.text((x_time, current_y), plan['time'], fill="black", font=font)  # Thời gian
                        extra_draw.text((x_location, current_y), plan['location'], fill="black", font=font)  # Địa điểm
                        extra_draw.text((x_activity, current_y), plan['activity'], fill="black", font=font)  # Nội dung hoạt động
                        current_y += line_height

                        # Dừng nếu đạt đến cuối phụ lục
                        if current_y >= 3000:  # Giới hạn chiều cao tối đa của phụ lục
                            st.warning("Kế hoạch quá nhiều, một số nội dung không được đưa vào phụ lục.")
                            break

            # Thêm chữ ký vào ảnh
            add_signatures(image)

            # Hiển thị ảnh đơn đăng ký
            st.image(image, caption="Đơn đăng ký (Xem trước)", use_container_width=True)

            # Nếu cần và có phụ lục, hiển thị ảnh phụ lục
            if extra_needed and 'extra_image' in locals():
                st.markdown("### Phụ lục (Xem trước)")
                st.image(extra_image, caption="Phụ lục (Xem trước)", use_container_width=True)

        except Exception as e:
            st.error(f"Lỗi khi tải ảnh hoặc font: {e}")  # Hiển thị thông báo lỗi
            st.stop()

    def generate_pdf():
        try:
            # Sử dụng thư mục tạm thời để lưu ảnh và tạo PDF
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_dir_path = pathlib.Path(temp_dir)  # Chuyển đổi thành đối tượng Path để dễ thao tác

                # Thiết lập đường dẫn cho các file ảnh tạm thời
                main_image_path = temp_dir_path / "studywork_main.png"
                extra_image_path = temp_dir_path / "studywork_extra.png"

                # Lưu các file ảnh (ảnh chính luôn được lưu)
                image.save(main_image_path)
                if extra_needed:  # Nếu cần phụ lục thì mới lưu
                    extra_image.save(extra_image_path)

                # Danh sách các file ảnh để tạo PDF
                image_list = [str(main_image_path)]  # Luôn có ảnh chính
                if extra_needed:  # Nếu cần phụ lục thì thêm vào danh sách
                    image_list.append(str(extra_image_path))

                # Chuyển đổi ảnh thành PDF sử dụng thư viện img2pdf
                pdf_bytes = img2pdf.convert(image_list)

                # Tạo nút tải xuống file PDF
                st.download_button(
                    label="Tải Đơn Đăng Ký PDF",  # Nhãn của nút
                    data=pdf_bytes,  # Dữ liệu PDF
                    file_name="교외체험학습_신청서.pdf",  # Tên file mặc định khi tải
                    mime="application/pdf"  # Loại MIME (Multipurpose Internet Mail Extensions)
                )

        except Exception as e:
            st.error(f"PDF 생성 중 오류 발생: {e}")  # Báo lỗi nếu có

    # Tạo nút kích hoạt quá trình tạo và tải file PDF
    if st.button("Tạo và Tải File PDF", key="pdf_download_button"):
        generate_pdf()  # Gọi hàm generate_pdf() để tạo và tải file PDF

# Thêm footer bằng HTML và CSS
footer = """
    <style>
        .footer {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #f1f1f1;
            text-align: center;
            padding: 10px;
            font-size: 14px;
        }
    </style>
    <div class="footer">
        Người tạo: 박기윤 (Park Ki-yoon)
    </div>
"""
st.markdown(footer, unsafe_allow_html=True)  # Chèn footer vào ứng dụng